#!/bin/bash

set -e
set -u
set -o pipefail

DEFAULT_ACCOUNT="${USER}"
DEFAULT_CREATOR="scrt"
DEFAULT_KIND="environment"
DEFAULT_TYPE="envt"

security.args ()
{
  local args;

  [ -n "${secret_account:-}" ] && args+=" -a ${secret_account}"
  [ -n "${secret_creator:-}" ] && args+=" -c ${secret_creator}"
  [ -n "${secret_kind:-}" ]    && args+=" -D ${secret_kind}"
  [ -n "${secret_type:-}" ]    && args+=" -c ${secret_type}"

  echo "${args:-}"
}

delete.secret ()
{
  security delete-generic-password $(security.args) \
    -s "${1}"
}

get.secret ()
{
  security find-generic-password $(security.args) \
    -s ${1} \
    -w
}

eval.secret ()
{
  echo "export ${1}=$(get.secret ${1})"
}

save.secret ()
{
  echo -n "Enter value for ${1} ‚ùØ "
  read -t 30 secret
  security add-generic-password $(security.args) \
    -U \
    -s "${1}" \
    -w "${secret}"
}

main ()
{
  local secret_account secret_creator secret_kind secret_type
  local subcommand
  local args=''

  while [ $# -gt 0 ]; do
    unset OPTARG
    unset OPTIND
    while getopts ":a:c:C:D:l:" opt; do
      case "${opt}" in
        a)  secret_account=${OPTARG}  ;;
        c)  secret_creator=${OPTARG}  ;;
        C)  secret_type=${OPTARG}     ;;
        D)  secret_kind=${OPTARG}     ;;
        l)  secret_label=${OPTARG}    ;;
        \?) usage "invalid option: -${OPTARG}"
      esac
    done

    shift $((OPTIND-1))
    args+=" ${1:-}"
    shift || break
  done

  set -- ${args}

  if [ ! -n "${1:-}" ]; then
    usage "no subcommand provided"
  fi

  if [ ! -n "${2:-}" ]; then
    usage "no service provided"
  fi

  case ${1:-} in
    delete) subcommand=delete ;;
    eval)   subcommand=eval ;;
    print)  subcommand=print ;;
    save)   subcommand=save
            secret_account=${secret_account:-${DEFAULT_ACCOUNT}}
            secret_creator=${secret_creator:-${DEFAULT_CREATOR}}
            secret_kind=${secret_kind:-${DEFAULT_KIND}}
            secret_type=${secret_type:-${DEFAULT_TYPE}}
            ;;
    \?)     usage "invalid subcommand: ${1:-}" ;;
  esac

  shift

  while [ $# -gt 0 ]; do
    case ${subcommand} in
      delete) delete.secret ${1} ;;
      eval)   eval.secret ${1} ;;
      print)  get.secret ${1} ;;
      save)   save.secret ${1} ;;
    esac
    shift || break
  done
}

usage ()
{
  cat <<EOB
Usage: $(basename $0) [command] [name ...] [opt ...]

Commands:
  eval    Print export VAR=password statements to evaluate
  print   Print the secret to stdout
  save    Create or update a secret in keychain
  delete  Delete a secret from keychain

Options:
  -a account   Specify account name (${DEFAULT_ACCOUNT})
  -c creator   Specify item four character creator (${DEFAULT_CREATOR})
  -C type      Specify item four character type (${DEFAULT_TYPE})
  -D kind      Specify kind (${DEFAULT_KIND})
  -l label     Specify label (name)
EOB

  echo
  echo Error: ${@}
  exit 1
}

${DEBUG:-false} && set -x
main ${@:-}
