#!/usr/bin/env bash

DEBUG=false

BREW_BASE="/usr/local/bin"
BASHRC_LOCAL="${HOME}/.config/bashrc"
BASHRC_HOME=""

#
# Core bash settings
#

set -o errtrace
set -o functrace
shopt -s expand_aliases

##
## Bootstrap functions
##

# Detect bashrc repository absolute path
bashrc.repo.base ()
{
  if [ -z "${BASHRC_HOME:-}" ]
  then d=$(bashrc.expand.path "${HOME}/.bashrc"); 
       BASHRC_HOME="${d%/*/*}";
  fi
  echo "${BASHRC_HOME}"
}

# Expand path components to be relative to bashrc.repo.base
bashrc.repo.path () # $@: path components to expand
{
  local d="$(bashrc.repo.base)"
  local v; for v in "$@"; do d="${d}/${v}"; done
  echo "${d}"
}

# Expand path components to be relative to BASHRC_LOCAL
bashrc.local.path () # $@: path components to expand
{
  local d="${BASHRC_LOCAL}"
  local v; for v in "$@"; do d="${d}/${v}"; done
  echo "${d}"
}

# Locate path components in either the local override or bashrc repository
bashrc.locate () # $@: path components to expand
{
  local local_path="$(bashrc.local.path "${@}")"
  if [ -f "${local_path}" ] || [ -L "${local_path}" ]
  then echo "${local_path}"
  else echo "$(bashrc.repo.path "${@}")"
  fi
}

# Iterate over all configuration paths, returning a list of file paths
bashrc.list () # $@: path components to expand
{
  local x; for x in $(bashrc.local.path ${@})/* $(bashrc.repo.path ${@})/*
  do [ "${x##*/}" == "*" ] && continue
     bashrc.locate ${@} ${x##*/}
  done
}

# Load a file located in a directory
bashrc.load () # $1: directory to load from, $2: file to load
{ 
  source $(bashrc.locate "$1" "$2"); 
}

#
# Detection functions
#

# Detect whether this is OSX
bashrc.is_osx ()
{
  if [ -d "/Volumes" ]
  then return 0
  else return 1
  fi
}

# Detect whether we are within a SSH shell
bashrc.is_ssh ()
{
  if [ -n "${SSH_TTYL:-}" ]
  then return 0
  else return 1
  fi
}

# Detect if homebrew has installed coreutils
bashrc.is_brewed ()
{
  bashrc.is_osx || return 0
  [ ! -e "${BREW_BASE}/grealpath" ] && return 1
  return 0
}

# Abstract symlink expansion for Linux and OSX support
bashrc.expand.path () # $@: path components to expand
{
  if bashrc.is_osx
  then ${BREW_BASE}/grealpath "$@"
  else readlink -f "$@"
  fi
}

#
# Load libraries
#

if bashrc.is_brewed; then
  bashrc.load lib colors
  bashrc.load lib init
  bashrc.load lib path

  bashrc.load etc alias
  bashrc.load etc env
  bashrc.load etc path
  bashrc.load etc sshagent
  bashrc.load etc prompt

  bashrc.load lib prompt
  bashrc.load lib completion
  bashrc.load lib dotfiles
  bashrc.load lib rvm
  bashrc.load lib resty

  bashrc.load etc end
else echo "Please 'brew install coreutils' before continuing"
fi

set +u

