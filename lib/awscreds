#!/bin/bash

# CLI AWS Credentials loader
# - awscreds list                       : list available profiles
# - awscreds print PROFILE_NAME         : print variables for a profile
# - awscreds assume PROFILE_NAME        : assume a profile
# - awscreds assume-sts PROFILE_NAME    : assume a profile with a role_arn
# - awscreds undefine                   : unset variables
#
awscreds () {
  scope () (
    # Parse an ini file into a global variable named `config`
    # @param $1 the file to load
    #
    config.parse ()
    {
      config="$(<$1)"                   # read the file
      config="${config//\[/\\[}"        # escape [
      config="${config//\]/\\]}"        # escape ]
      OLD_IFS=$IFS
      IFS=$'\n' && config=( ${config} ) # convert to line-array
      config=( ${config[*]//;*/} )      # remove comments with ;
      config=( ${config[*]/\    =/=} )  # remove tabs before =
      config=( ${config[*]/=\   /=} )   # remove tabs be =
      config=( ${config[*]/\ =\ /=} )   # remove anything with a space around =
      config=( ${config[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
      config=( ${config[*]/%\\]/ \(} )  # convert text2function (1)
      config=( ${config[*]/=/=\( } )    # convert item to array
      config=( ${config[*]/%/ \)} )     # close array parenthesis
      config=( ${config[*]/%\\ \)/ \\} )  # the multiline trick
      config=( ${config[*]/%\( \)/\(\) \{} ) # convert text2function (2)
      config=( ${config[*]/%\} \)/\}} ) # remove extra parenthesis
      config[0]=""                      # remove first element
      config[${#config[*]} + 1]='}'     # add the last brace
      eval "$(echo "${config[*]}")"     # eval the result
      IFS=$OLD_IFS
    }

    # List the sections in the parsed config variable
    # @global $* this must be run after `config.parse`
    config.sections ()
    {
      for line in ${config[*]}; do
        [[ "${line}" =~ ^cfg\.section\. ]] || continue;
        echo ${line%% *}
      done
    }

    # List the profiles in the parsed config variable
    # @global $* this must be run after `config.parse`
    profile.list ()
    {
      while read line; do
        echo ${line/cfg.section./}
      done < <(config.sections)
    }

    # Load the variables from a given profile into the global scope
    # @param $1 the profile to load
    # @global $* this must be run after `config.parse`
    profile.load ()
    {
      profile="${1}"
      "cfg.section.${1}"

      profile.load.source
      ${expand_sts:-false} && profile.load.sts
    }

    # Load the source_profile if defined
    # @global $* this must be run after `profile.load`
    profile.load.source ()
    {
      [ -n "${source_profile}" ] && {
        source_profile="" expand_sts=false profile.load "${source_profile}"
      }
    }

    # Load the temporary STS credentials if required
    # @global $* this must be run after `profile.load`
    profile.load.sts ()
    {
      [ -n "${role_arn}" ] && {
        unset AWS_SESSION_TOKEN; # Ensure no AWS_SESSION_TOKEN exists already
        local value=$(profile.exec aws sts assume-role \
          --role-arn="${role_arn}" \
          --role-session-name "${profile}"
        )

        aws_access_key_id=$(echo $value|jq -r .Credentials.AccessKeyId)
        aws_secret_access_key=$(echo $value|jq -r .Credentials.SecretAccessKey)
        session_token=$(echo $value|jq -r .Credentials.SessionToken)
      }
    }

    # Execute a given command with the variables for an AWS profile
    # @param $* the command to execute
    # @global $* this must be run after `profile.load`
    profile.exec ()
    {
      AWS_ACCESS_KEY_ID="${aws_access_key_id}" \
      AWS_SECRET_ACCESS_KEY="${aws_secret_access_key}" \
      AWS_DEFAULT_REGION="${region:-us-east-1}" \
      AWS_DEFAULT_PROFILE="${profile}" \
        "$@"
    }

    # Prints the environment variables for a given AWS profile
    # @param $1=export whether to print exports or local variables
    # @global $* this must be run after `profile.load`
    profile.print ()
    {
      local prefix=${prefix:-}
      [ -n "${prefix}" ] && prefix="${prefix} "

      echo ${prefix}AWS_DEFAULT_PROFILE="${profile}"
      echo ${prefix}AWS_DEFAULT_REGION="${region:-us-east-1}"
      echo ${prefix}AWS_ACCESS_KEY_ID="${aws_access_key_id}"
      echo ${prefix}AWS_SECRET_ACCESS_KEY="${aws_secret_access_key}"
      [ -n "${role_arn}" ] && {
        echo ${prefix}AWS_STS_ROLE_ARN="${role_arn}";
      }
      [ -n "${session_token}" ] && {
        echo ${prefix}AWS_SESSION_TOKEN="${session_token}";
      }
    }

    # Prints the variable unset commands for the active AWS profile
    # @global $* this should be run after `profile.load`
    profile.undefine ()
    {
      while read var; do
        echo "unset ${var/=*/}"
      done < <(env | grep 'AWS')
    }

    # If undefining, then do so before we do actual work
    #
    [ "${1}" == "undefine" ] && {
      profile.undefine
      exit 0
    }

    # Load the configuration file
    #
    config.parse "${HOME}/.aws/credentials"

    # Load list of profile names
    #
    profiles=$(profile.list)

    # Function main loop
    #
    [ "${1}" == "list" ] && {
      echo "available profiles: "
      echo "------------------- "
      echo "${profiles}"
      exit 0
    }

    [[ ! "${profiles}" =~ "${2}" ]] && {
      echo "profile not found: ${2}" >&2
      echo "------------------" >&2
      echo "${profiles}" >&2
      exit 1
    }

    if [ "${1}" == "assume" ]
    then profile.load "${2}"
    else expand_sts=true profile.load "${2}"
    fi

    [ "${1}" == "exec" ] && {
      shift; shift
      profile.exec "${@}"
      exit $?
    }

    expand_sts=false prefix="export" profile.print
    exit 0
  )

  [ "${#}" -eq 0 ] && {
    echo "AWSCREDS usage"
    echo "=============="
    echo "list            : list available profiles defined in ~/.aws/credentials"
    echo "undefine        : unset all environment variables"
    echo "print NAME      : print export variables for a given aws profile"
    echo "assume NAME     : export variable for a given aws profile"
    echo "assume-sts NAME : assume role and export variable for a given aws profile"
    return 1
  }

  local value=$(scope "${@}" || echo "error")

  [ "${value}" == "error" ] && {
    return 1
  }

  [ "${1}" == "undefine" ] && {
    eval "${value}"
    return 0
  }

  [[ "${1}" =~ "assume" ]] || {
    echo "${value}"
    return 0
  }

  while read line; do
    if [[ "${line}" =~ ^export ]]
    then export ${line/export /}
    else echo "$line"
    fi
  done < <(echo "${value}")

  return $retval
}

[ "$0" = "$BASH_SOURCE" ] && {
  awscreds "$@"
}
